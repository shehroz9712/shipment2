<?php

namespace $CLASS_NAMESPACE$;

use $INTERFACE_NAMESPACE$;

use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;

class $CLASS$ implements $INTERFACE$
{
    public function __construct(Model $model)
    {
        $this->model = $model;
    }

     /**
     * Get All Models
     * @param array $columns
     * @param array $relations
     * @return Collection
     */

    public function all(array $columns = ['*'] , array $relations = []) : Collection
    {
        return $this->model->with($relations)->get($columns);
    }
     /**
     * Get all trashed Models
     * @return Collection
     */
    public function allTrashed() : Collection
    {
        return $this->model->onlyTrashed()->get();
    }


    /**
     * Find model by id
     * @param int $id
     * @param array $columns
     * @param array $relations
     * @param array $appends
     * @return Model
     */

    public function find(int $id, array $columns = ['*'] , array $relations = [] , array $appends = []) : ?Model
    {
        return $this->model->select($columns)->with($relations)->findOrFail($id)->append($appends);
    }

    /**
     * Find trashed model by id
     * @param int $id
     * @return Model
     */

    public function findTrashedById(int $id) : ?Model
    {
        return $this->model->withTrashed()->findOrFail($id);

    }
    /**
     * Find Only trashed model by id
     * @param int $id
     * @return Model
     */
    public function findOnlyTrashedById(int $id) : ?Model
    {
        return $this->model->onlyTrashed()->findOrFail($id);
    }
    /**
     * Create a  model
     * @param array $payload
     * @return Model
     */

    public function create(array $payload) : ?Model
    {
        return $this->model->create($payload)->fresh();
    }

    /**
     * Create a  model
     * @param int $id
     * @param array $payload
     * @return Model
     */

    public function update(int $id, array $payload) : bool
    {
        return $this->find($id)->update($payload);
    }

    /**
     * Delete by  model id
     * @param int $id
     * @return bool
     */

    public function delete(int $id) : bool
    {
        return $this->find($id)->delete();
    }
    /**
     * Delete by Multiple model id
     * @param array $id
     * @return bool
     */

    public function deleteByIds(array $id) : bool
    {
        return $this->model->whereIn('id' , $id)->delete();
    }

    /**
     * Restore by model id
     * @param int $id
     * @return bool
     */

    public function restoreById(int $id) : bool
    {
        return $this->findOnlyTrashedById($id)->restore();
    }

    /**
     * Permanent delete by model id
     * @param int $id
     * @return bool
     */

    public function permanentlyDeleteById(int $id) : bool
    {
        return $this->findTrashedById($id)->forceDelete();
    }
}
